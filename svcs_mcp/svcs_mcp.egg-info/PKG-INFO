Metadata-Version: 2.4
Name: svcs-mcp
Version: 1.0.0
Summary: SVCS MCP Server - Semantic Version Control System with Model Context Protocol support
Author-email: SVCS Contributors <svcs@example.com>
License: MIT
Project-URL: Homepage, https://github.com/svcs/svcs-mcp
Project-URL: Documentation, https://svcs-mcp.readthedocs.io
Project-URL: Repository, https://github.com/svcs/svcs-mcp.git
Project-URL: Issues, https://github.com/svcs/svcs-mcp/issues
Keywords: git,semantic-analysis,code-evolution,mcp,ai
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Version Control
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: mcp>=1.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: gitpython>=3.1.0
Requires-Dist: rich>=13.0.0
Requires-Dist: click>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"

# SVCS MCP Server

[![PyPI version](https://badge.fury.io/py/svcs-mcp.svg)](https://badge.fury.io/py/svcs-mcp)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![MCP Compatible](https://img.shields.io/badge/MCP-compatible-green.svg)](https://modelcontextprotocol.io/)

Transform your code evolution tracking with SVCS MCP Server - a production-ready semantic version control system that integrates with any MCP-compatible IDE.

## 🚀 Quick Start

### Installation

```bash
pip install svcs-mcp
```

### Register Your First Project

```bash
cd /path/to/your/project
svcs init --name "My Awesome Project"
```

### Query Your Code Evolution

Use any MCP-compatible IDE (VS Code, Cursor, etc.) to ask:
- "Show me performance optimizations from last week"
- "What architecture changes were made recently?"
- "Compare evolution patterns across my projects"

## 🏗️ Architecture

### Global Service Design
- **One installation, many projects**: Install once, use everywhere
- **Centralized intelligence**: All semantic insights in one place
- **Clean project management**: Easy enable/disable per project
- **Background processing**: Non-intrusive analysis

### Directory Structure
```
~/.svcs/                      # Global SVCS directory
├── global.db                 # Multi-project database
├── config.yaml               # Global configuration
├── hooks/                    # Global git hooks
│   └── svcs-hook             # Universal git hook script
├── logs/                     # MCP server logs
└── projects/                 # Per-project metadata
```

## 🛠️ Commands

### Project Management
```bash
svcs init                     # Register current directory
svcs init --name "MyProject" /path/to/project  # Register specific path
svcs remove                   # Unregister current directory
svcs status                   # Show registration status
svcs list                     # List all registered projects
```

### Analysis & Querying
```bash
svcs stats                    # Show project statistics
svcs query "performance optimizations"  # Natural language queries
```

### MCP Server Management
```bash
svcs-mcp-server              # Start MCP server (for IDE integration)
```

## 🔧 MCP Tools Available

When connected via MCP, these tools are available in your IDE:

1. **register_project** - Enable SVCS for a project
2. **unregister_project** - Disable SVCS for a project  
3. **list_projects** - Show all registered projects
4. **get_project_statistics** - Project semantic insights
5. **query_semantic_evolution** - Natural language evolution queries

## 🎯 IDE Integration

### VS Code with MCP
1. Install SVCS MCP: `pip install svcs-mcp`
2. Start MCP server: `svcs-mcp-server`
3. Configure VS Code to connect to MCP server
4. Ask semantic questions directly in VS Code!

### Other MCP-Compatible IDEs
SVCS MCP works with any editor that supports the Model Context Protocol:
- Cursor
- Claude Dev
- Continue
- And more!

## 📊 Benefits

### For Individual Developers
- **Understand your code's story**: See how your thinking evolved
- **Track improvements**: Performance optimizations, architecture changes
- **Cross-project insights**: Patterns across all your repositories
- **Natural language queries**: Ask questions in plain English

### For Teams
- **Code archaeology**: Understand legacy codebases quickly
- **Review insights**: See semantic changes beyond syntax diffs
- **Knowledge transfer**: New team members understand evolution
- **Quality tracking**: Monitor code improvement trends

### For Organizations
- **Portfolio analysis**: Semantic trends across all repositories
- **Technical debt**: Identify improvement opportunities
- **Best practices**: See what changes work well
- **Developer productivity**: Understand coding pattern evolution

## 🔄 Migration from Existing SVCS

If you already have SVCS installed in projects:

```bash
cd /existing/svcs/project
svcs init --name "Existing Project"
# ✅ Automatically migrates existing semantic data
# ✅ Preserves all historical analysis
# ✅ Upgrades to global management
```

## 🎨 Example Queries

Once integrated with your IDE:

**Performance Focus:**
> "Show me all performance optimizations made in the last month with confidence above 80%"

**Architecture Evolution:**
> "How has the DataProcessor class evolved over time?"

**Cross-Project Analysis:**
> "Compare error handling improvements across my Python projects"

**Quality Insights:**
> "What types of semantic changes happen most frequently?"

## 🚧 Development Status

- ✅ **Core Architecture**: Multi-project database and management
- ✅ **MCP Server**: Full Model Context Protocol implementation  
- ✅ **CLI Tools**: Complete project management commands
- 🚧 **Semantic Integration**: Connecting with existing SVCS analysis (Phase 2)
- 🚧 **Advanced Queries**: Cross-project evolution analysis (Phase 3)
- 🚧 **Web Dashboard**: Visual evolution insights (Phase 4)

## 📖 Documentation

- [Installation Guide](docs/installation.md)
- [MCP Integration](docs/mcp-integration.md)
- [API Reference](docs/api-reference.md)
- [Migration Guide](docs/migration.md)

## 🤝 Contributing

We welcome contributions! See [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## 📄 License

MIT License - see [LICENSE](LICENSE) for details.

---

**Transform your code evolution understanding with SVCS MCP Server - the future of semantic version control.**
