#!/usr/bin/env python3
"""
Test script to extract REAL event types and layers from SVCS business logic
This extracts the actual event types that are generated by the analysis code.
"""
import sys
import os
import re
sys.path.append('/Users/markomanninen/Documents/GitHub/svcs')

def extract_real_event_types():
    """Extract actual event types from the business logic code."""
    
    # Read the multilang analyzer to find actual event types used
    with open('svcs_multilang.py', 'r') as f:
        content = f.read()
    
    # Extract event types from 'event_type': 'name' patterns
    event_pattern = r"'event_type':\s*'([^']+)'"
    found_events = set(re.findall(event_pattern, content))
    
    # Also extract from "event_type": "name" patterns
    event_pattern2 = r'"event_type":\s*"([^"]+)"'
    found_events.update(re.findall(event_pattern2, content))
    
    # Extract from SemanticEventType enum values
    enum_pattern = r'= "([^"]+)"'
    enum_matches = re.findall(enum_pattern, content)
    # Filter to only keep semantic event types (not other enum values)
    semantic_events = [e for e in enum_matches if '_' in e and any(
        keyword in e.lower() for keyword in [
            'node', 'dependency', 'function', 'class', 'variable', 
            'logic', 'signature', 'added', 'removed', 'changed',
            'php', 'js', 'py'
        ]
    )]
    
    found_events.update(semantic_events)
    
    return sorted(list(found_events))

def extract_real_layers():
    """Extract actual layers from the layer system."""
    
    layers = []
    
    # Check if layers directory exists
    if os.path.exists('svcs/layers'):
        for filename in os.listdir('svcs/layers'):
            if filename.startswith('layer') and filename.endswith('.py'):
                # Extract layer number/id from filename
                if 'layer1' in filename:
                    layers.append('1')
                elif 'layer2' in filename:
                    layers.append('2')
                elif 'layer3' in filename:
                    layers.append('3')
                elif 'layer4' in filename:
                    layers.append('4')
                elif 'layer5a' in filename:
                    layers.append('5a')
                elif 'layer5b' in filename:
                    layers.append('5b')
    
    # Always include core layer as it's the default
    layers.append('core')
    
    return sorted(layers)

def analyze_event_generation_logic():
    """Analyze the actual event generation patterns."""
    
    print("BUSINESS LOGIC ANALYSIS:")
    print("=" * 60)
    
    # Analyze the multilang file to understand event generation
    with open('svcs_multilang.py', 'r') as f:
        content = f.read()
    
    # Count occurrences of different event types
    basic_events = ['node_added', 'node_removed', 'node_logic_changed', 'dependency_added', 'dependency_removed']
    
    print("Core Event Types Usage:")
    for event in basic_events:
        count = content.count(f"'{event}'") + content.count(f'"{event}"')
        print(f"  {event}: {count} occurrences")
    
    # Check for language-specific patterns
    php_count = content.count("'php_") + content.count('"php_')
    js_count = content.count("'js_") + content.count('"js_')
    py_count = content.count("'py_") + content.count('"py_')
    
    print(f"\nLanguage-specific Events:")
    print(f"  PHP events: {php_count} occurrences")
    print(f"  JavaScript events: {js_count} occurrences") 
    print(f"  Python events: {py_count} occurrences")

# Extract real metadata
real_event_types = extract_real_event_types()
real_layers = extract_real_layers()

print("REAL Event Types from Business Logic:")
print("=" * 60)
for i, event_type in enumerate(real_event_types, 1):
    print(f"{i:2}. {event_type}")

print(f"\nTotal: {len(real_event_types)} event types")

print(f"\nREAL Layers from Layer System:")
print("=" * 60)
layer_names = {
    'core': 'Core Analysis',
    '1': 'Structural',
    '2': 'Syntactic', 
    '3': 'Semantic',
    '4': 'Behavioral',
    '5a': 'AI Patterns',
    '5b': 'True AI'
}

for i, layer in enumerate(real_layers, 1):
    print(f"{i}. {layer} - {layer_names.get(layer, 'Unknown')}")

print(f"\nTotal: {len(real_layers)} layers")

# Analyze the business logic patterns
analyze_event_generation_logic()
